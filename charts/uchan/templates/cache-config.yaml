{{- if .Values.varnish.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "uchan.fullname" . }}-vcl-config

data:
  backends.vcl.tmpl: |
    {{`
    import directors;

    // Application backends
    {{ if .Backends -}}
    {{ range .Backends }}
    backend {{ .PodName }} {
      // backend {{ .PodName }} labels:
      {{- range $item, $key := .NodeLabels }}
      //   {{ $item }}: {{ $key -}}
      {{ end }}
      .host = "{{ .IP }}";
      .port = "{{ $.TargetPort }}";
    }
    {{ end }}
    {{- else -}}
    // Without this dummy backend, varnish will not compile the code
    // This is a dummy, and should not be used anywhere
    backend dummy {
      .host = "127.0.0.1";
      .port = "0";
    }
    {{- end }}

    // Create ACL with application backend members
    acl acl_backend {
      {{ range .Backends }}
      "{{ .IP }}"/16;
      {{ end }}
    }

    sub init_backends {
      // The line below is generated and creates a variable that is used to build custom logic
      // when the user configured the backends incorrectly. E.g. return a custom error page that indicates the issue.
      var.global_set("backendsFound", {{ if .Backends }}"true"{{ else }}"false"{{ end }}); //only strings are allowed to be set globally

      new container_rr = directors.round_robin();
      {{- range .Backends }}
      container_rr.add_backend({{ .PodName }});
      {{- end }}
    }
    `}}

  entrypoint.vcl: |+
    vcl 4.0;

    import std;
    import var;
    include "backends.vcl";

    sub vcl_init {
      call init_backends;
    }

    sub vcl_recv {
      if (req.restarts > 0) {
        set req.hash_always_miss = true;
      }

      // If backends are not configured correctly
      if (!(var.global_get("backendsFound") == "true")) {
        return(synth(503, "No backends configured"));
      }

      set req.backend_hint = container_rr.backend();

      if (req.method == "PURGE") {
        if (!remote.ip ~ acl_backend) {
          return (synth(405, "Not allowed."));
        }

        return (purge);
      }

      # Remove verification cookie from client
      # The verification cookie has been designed to be a transparent cookie,
      # that only has a function for POST requests and the /verify/ endpoint.
      # It never influences caching, and therefore caching is allowed, if it's
      # the only cookie set.
      set req.http.Cookie = regsuball(req.http.Cookie, "verification=[^;]+(; )?", "");

      # Remove a ";" prefix in the cookie if present
      set req.http.Cookie = regsuball(req.http.Cookie, "^;\s*", "");

      # Are there cookies left with only spaces or that are empty?
      # If so, clear cookie header completely.
      if (req.http.cookie ~ "^\s*$") {
        unset req.http.cookie;
      }
    }

    sub vcl_backend_response {
      // Do not cache 404s from backends
      if (beresp.status == 404) {
        set beresp.ttl = 0s;
      }
    }

    sub vcl_deliver {
      if (obj.hits > 0) {
          set resp.http.X-Varnish-Cache = "HIT";
      } else {
        set resp.http.X-Varnish-Cache = "MISS";
      }

      return (deliver);
    }

{{- end }}
